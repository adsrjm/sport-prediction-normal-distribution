import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from scipy.stats import norm

# üöÄ Configurer la page Streamlit
st.set_page_config(page_title="Pr√©diction de Score Sportif", layout="centered")

# üéØ Titre de l'application
st.title("‚öΩ Pr√©diction de Score Sportif par la Loi Normale")
st.markdown("""
Bienvenue ! Cette application estime le score futur d'une √©quipe  
en utilisant la loi normale, bas√©e sur ses scores pass√©s.
""")
st.divider()

# ‚ÑπÔ∏è Explication dans la barre lat√©rale
st.sidebar.title("‚ÑπÔ∏è √Ä propos")
st.sidebar.write("""
La loi normale (ou loi de Gauss) mod√©lise les scores fr√©quents autour de la moyenne.  
Plus la courbe est √©troite, plus l'√©quipe est r√©guli√®re.
""")

# üìù Entr√©e utilisateur : scores pass√©s sous forme de liste
st.subheader("üìä Entrez les scores pass√©s")
st.write("Saisissez les scores (exemple : 1,2,2,3,3)")
scores_str = st.text_input("Scores s√©par√©s par des virgules", "1,2,2,3,3")

try:
    # üî¢ Transformer la cha√Æne en liste de nombres
    scores = [float(s) for s in scores_str.split(",")]
    scores = [s for s in scores if s >= 0]  # Exclure les scores n√©gatifs

    # üìä Calcul de la moyenne (mu) et √©cart-type (sigma)
    mu = np.mean(scores)
    sigma = np.std(scores, ddof=0)

    st.success("‚úÖ Donn√©es trait√©es avec succ√®s !")

    # üìå Afficher les statistiques de base
    st.subheader("üìå Statistiques")
    st.write(f"- Moyenne (Œº) = {mu:.2f}  üëâ Score moyen")
    st.write(f"- √âcart-type (œÉ) = {sigma:.2f}  üëâ Variabilit√© des scores")

    # üé≤ Simuler 1000 scores selon la loi normale, arrondis √† des entiers ‚â• 0
    st.subheader("üé≤ Simulation des scores futurs")
    simulated = np.random.normal(mu, sigma, 1000)
    simulated = np.round(simulated).astype(int)
    simulated = simulated[simulated >= 0]

    # üìà Afficher un histogramme discret + la courbe de Gauss
    fig, ax = plt.subplots()

    # Histogramme des scores simul√©s
    bins = np.arange(min(simulated), max(simulated) + 2) - 0.5
    counts, _, _ = ax.hist(simulated, bins=bins, color='lightgreen', edgecolor='black', density=True, label="Scores simul√©s")
    ax.set_xticks(np.arange(min(simulated), max(simulated)+1))

    # Courbe de la loi normale de Gauss (continue)
    x_vals = np.linspace(min(simulated) - 1, max(simulated) + 1, 300)
    pdf_vals = norm.pdf(x_vals, mu, sigma)
    ax.plot(x_vals, pdf_vals, color='orange', lw=2, label="Loi normale de Gauss")

    ax.set_xlabel("Score")
    ax.set_ylabel("Densit√©")
    ax.set_title("Distribution des scores vs loi normale")
    ax.legend()
    st.pyplot(fig)

    # üéØ Probabilit√© pour un score entier donn√©
    st.subheader("üéØ Probabilit√© pour un score donn√©")
    
    max_score = max(max(scores), max(simulated))
    max_limit = int(np.ceil(max_score + 3))  # Pour slider

    # Initialiser score s√©lectionn√©
    if 'selected_score' not in st.session_state:
        st.session_state.selected_score = int(round(mu))

    x = st.slider(
        "Choisissez un score entier",
        min_value=0,
        max_value=int(max_limit),
        value=st.session_state.selected_score,
        step=1,
        key='score_slider'
    )
    st.session_state.selected_score = x

    # üîç Probabilit√© discr√®te via la loi normale : P(x-0.5 < X < x+0.5)
    prob_discrete = norm.cdf(x + 0.5, mu, sigma) - norm.cdf(x - 0.5, mu, sigma)
    st.write(f"üìç Probabilit√© que le score soit **exactement {x}** : **{prob_discrete:.2%}**")

    # üì¶ Probabilit√© que le score soit dans un intervalle [a, b]
    st.subheader("üì¶ Probabilit√© dans un intervalle")

    default_low = int(np.floor(mu - sigma))
    default_high = int(np.ceil(mu + sigma))
    default_low = max(0, default_low)

    if 'interval_values' not in st.session_state:
        st.session_state.interval_values = (default_low, default_high)

    a, b = st.slider(
        "S√©lectionnez un intervalle entier",
        min_value=0,
        max_value=int(max_limit),
        value=st.session_state.interval_values,
        step=1,
        key='interval_slider'
    )
    st.session_state.interval_values = (a, b)

    if a > b:
        a, b = b, a

    # Calcul de la somme des probabilit√©s discr√®tes entre a et b
    scores_range = np.arange(a, b + 1)
    probs = [norm.cdf(k + 0.5, mu, sigma) - norm.cdf(k - 0.5, mu, sigma) for k in scores_range]
    st.write(f"üì¶ Probabilit√© que le score soit entre {a} et {b} : **{sum(probs):.2%}**")

except Exception as e:
    st.error("‚ö†Ô∏è Erreur : " + str(e))
